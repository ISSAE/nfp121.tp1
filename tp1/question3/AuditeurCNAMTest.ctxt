#BlueJ class context
comment0.target=AuditeurCNAMTest
comment0.text=\r\n\ Classe-test\ AuditeurCNAMTest.\r\n\ \r\n\ @author\ (votre\ nom)\r\n\ @version\ (un\ num\u00E9ro\ de\ version\ ou\ une\ date)\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ Les\ classes-test\ sont\ document\u00E9es\ ici\ \:\r\n\ \ \ \ \ \ \ \ \ \ http\://junit.sourceforge.net/javadoc/junit/framework/TestCase.html\r\n\ \ \ \ \ \ \ \ \ \ et\ sont\ bas\u00E9es\ sur\ le\ document\ \u00A9\ 2002\ Robert\ A.\ Ballance\ intitul\u00E9\r\n\ \ \ \ \ \ \ \ \ \ \u00ABJUnit\:\ Unit\ Testing\ Framework\u00BB.\r\n\ \r\n\ \ \ \ \ \ \ \ \ \ Les\ objets\ Test\ (et\ TestSuite)\ sont\ associ\u00E9s\ aux\ classes\ \u00E0\ tester\r\n\ \ \ \ \ \ \ \ \ \ par\ la\ simple\ relation\ yyyTest\ (e.g.\ qu'un\ Test\ de\ la\ classe\r\n\ \ \ \ \ \ \ \ \ \ Name.java\ se\ nommera\ NameTest.java);\ les\ deux\ se\ retrouvent\ dans\ le\r\n\ \ \ \ \ \ \ \ \ \ m\u00EAme\ paquetage.\ Les\ "engagements"\ (anglais\ \:\ "fixture")\ forment\ un\r\n\ \ \ \ \ \ \ \ \ \ ensemble\ de\ conditions\ qui\ sont\ vraies\ pour\ chaque\ m\u00E9thode\ Test\ \u00E0\r\n\ \ \ \ \ \ \ \ \ \ ex\u00E9cuter.\ Il\ peut\ y\ avoir\ plus\ d'une\ m\u00E9thode\ Test\ dans\ une\ classe\r\n\ \ \ \ \ \ \ \ \ \ Test;\ leur\ ensemble\ forme\ un\ objet\ TestSuite.\ BlueJ\ d\u00E9couvrira\r\n\ \ \ \ \ \ \ \ \ \ automatiquement\ (par\ introspection)\ les\ m\u00E9thodes\ Test\ de\ votre\r\n\ \ \ \ \ \ \ \ \ \ classe\ Test\ et\ g\u00E9n\u00E9rera\ la\ TestSuite\ cons\u00E9quente.\ Chaque\ appel\ d'une\r\n\ \ \ \ \ \ \ \ \ \ m\u00E9thode\ Test\ sera\ pr\u00E9c\u00E9d\u00E9\ d'un\ appel\ de\ setUp(),\ qui\ r\u00E9alise\ les\r\n\ \ \ \ \ \ \ \ \ \ engagements,\ et\ suivi\ d'un\ appel\ \u00E0\ tearDown(),\ qui\ les\ d\u00E9truit.\r\n
comment1.params=
comment1.target=AuditeurCNAMTest()
comment1.text=\r\n\ Constructeur\ de\ la\ classe-test\ AuditeurCNAMTest.\r\n
comment10.params=
comment10.target=void\ test_nom_avec_accent()
comment11.params=
comment11.target=void\ test_nom_vide()
comment11.text=\r\n\ Teste\ le\ comportement\ lorsque\ le\ nom\ est\ une\ cha\u00EEne\ vide.\r\n
comment12.params=
comment12.target=void\ test_nom_tres_long()
comment12.text=\r\n\ Teste\ le\ comportement\ lorsque\ le\ nom\ est\ tr\u00E8s\ long.\r\n\ V\u00E9rifie\ si\ la\ classe\ g\u00E8re\ correctement\ un\ nom\ d\u00E9passant\ une\ certaine\ longueur.\r\n
comment13.params=
comment13.target=void\ test_nom_compose_avec_separation_vide()
comment13.text=\r\n\ Teste\ le\ comportement\ avec\ un\ nom\ compos\u00E9\ et\ une\ separation\ par\ vide.\r\n\ V\u00E9rifie\ si\ la\ classe\ g\u00E8re\ correctement\ les\ noms\ compos\u00E9s\ avec\ separation\ par\ vide.\r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Met\ en\ place\ les\ engagements.\r\n\ \r\n\ M\u00E9thode\ appel\u00E9e\ avant\ chaque\ appel\ de\ m\u00E9thode\ de\ test.\r\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\r\n\ Supprime\ les\ engagements\r\n\ \r\n\ M\u00E9thode\ appel\u00E9e\ apr\u00E8s\ chaque\ appel\ de\ m\u00E9thode\ de\ test.\r\n
comment4.params=
comment4.target=void\ test_toString()
comment4.text=Un\ test\ de\ la\ m\u00E9thode\ toString().
comment5.params=
comment5.target=void\ test_nom_court()
comment6.params=
comment6.target=void\ test_nom_court_bis()
comment7.params=
comment7.target=void\ test_nom_avec_particule()
comment8.params=
comment8.target=void\ test_nom_compose()
comment9.params=
comment9.target=void\ test_nom_court_avec_particule()
numComments=14
